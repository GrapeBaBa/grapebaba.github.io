<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DAG on Grapebaba's Home</title><link>https://grapebaba.github.io/tags/dag/</link><description>Recent content in DAG on Grapebaba's Home</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 23 May 2022 20:57:38 +0800</lastBuildDate><atom:link href="https://grapebaba.github.io/tags/dag/index.xml" rel="self" type="application/rss+xml"/><item><title>Databend pipeline executor notes</title><link>https://grapebaba.github.io/databend-pipeline-executor-notes/</link><pubDate>Mon, 23 May 2022 20:57:38 +0800</pubDate><guid>https://grapebaba.github.io/databend-pipeline-executor-notes/</guid><description>Pipeline Executor ðŸ”—Executor Tasks ðŸ”—struct ExecutorTasks { tasks_size: usize, workers_sync_tasks: Vec&amp;lt;VecDeque&amp;lt;ProcessorPtr&amp;gt;&amp;gt;, workers_async_tasks: Vec&amp;lt;VecDeque&amp;lt;ProcessorPtr&amp;gt;&amp;gt;, workers_completed_async_tasks: Vec&amp;lt;VecDeque&amp;lt;CompletedAsyncTask&amp;gt;&amp;gt;, } pub fn create(workers_size: usize) -&amp;gt; ExecutorTasks { let mut workers_sync_tasks = Vec::with_capacity(workers_size); let mut workers_async_tasks = Vec::with_capacity(workers_size); let mut workers_completed_async_tasks = Vec::with_capacity(workers_size); for _index in 0..workers_size { workers_sync_tasks.push(VecDeque::new()); workers_async_tasks.push(VecDeque::new()); workers_completed_async_tasks.push(VecDeque::new()); } ExecutorTasks { tasks_size: 0, workers_sync_tasks, workers_async_tasks, workers_completed_async_tasks, } }</description></item></channel></rss>